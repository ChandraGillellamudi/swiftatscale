# User interface

User interface is the entry point in our apps. It's what the users see and interact with. Interfaces are composable and what users see on the screen is a composition of multiple views that are composed in armony to fit into your project brand. There are views that don't respond to actions, plain views, or views that respond to acttions, buttons. In *iOS* development all these elements come from `UIKit`, a system framework that uses inheritance to provide you with elements that you can use for your projects. `UIKit` is also the framework used for *watchOS* and *tvOS* applications. In this case the framework introduces some changes since the UX of these platform differs to the *iOS* one, but most of APIs are similar. That makes things easier to *iOS* developers that want jump into these platform with their experience on *iOS*.

On *macOS* things are a little bit different. There's no `UIKit` but instead there's `AppKit`. Since this framework was there before *iOS* APIs and components are a lot more different. For example, `UIResponder` chain that is not used a lot on iOS, is commonly used there. Self-contained views on *iOS*, such as `UITextView`s turn into a composition of multiple views on *macOS*, in essence, the view with the text, and the one that handles the scrolling.

For any of these forementioned platforms, we can use a tool from Xcode, *Interface Builder*, for building our UIs. As you might know, IB is a drag-and-drop tool that allows you to build UIs by dragging and dropping elements, setting their properties, sizes and constraints, and connecting them with your code via `@IB...` properties. *XIBs* and *Storyboards* are the files IB works with. Storyboards go one step further and allows you to define also the navigation of your app, connecting different ViewControllers and defining how the navigation should be between them.

Moreover, UIs can also be built in code. Whatever you do in IB, you can do it in code! *(but not the other way around)*. You can implement everything in code using `UIKit` and lower leverl APIs, or do something hybrid, where some elements are defined in an IB file and you connect them with some elements that you have defined in code. This a very polemic topic and a usual discussion point among developers. 

- How do you describe your UI?
- Do you use *XIBs* or *Storyboards*?

Any of them is better than the other. But although Apple is trying its best to add more functionalities to IB, there are still things that you can't do from there. Some examples could be animations, or interact with Core Animatino properties. That leads you to define part of the UI using IB and the other one in code. The *'source of truth'*, is not in a single place anymore but spread in two, or more files. Have you ever been in that situation where you didn't get the expected UI on the device, although the IB showed you what you wanted to achieve? Most likely you were modifying something from code that you didn't expect.

Having the source of truth in terms of UI spread across different files might eventually lead you to these kind of issues, that are sometimes hard to debug. *Why the size is not correct?*, *Why the font is not the one that I'm expecting?*. Nevertheless, having the UI in code makes requi

