# Herramientas

Una de las primeros pasos de nuestro proyecto será instalar todas las herramientas que vamos a necesitar para evitar sorpresas posteriores con errores del estilo `command not found`.

## Xcode

La primera de las herramientas a instalar es Xcode, el editor principal para los proyectos de Apple. Necesitar Xcode para trabajar en estos proyectos es un tema bastante polémico, y por eso hay alternativas como [AppCode](https://www.jetbrains.com/objc/) de Jetbrains que añaden funcionalidades extras y abren distintas APIs para que tengas personalizarlo a tu gusto, algo que no se puede hacer con Xcode. Aunque este IDE funciona bastante bien con Objective-C, y su herramienta de refactorizado está muy por delante del refactorizado con Xcode, el soporte de Swift todavía está muy por mejorar. Esto se debe no a Jetbrains, que no quiera estar a la altura de Xcode, sino a Apple que tiene un especial interés porque sus desarrolladores utilicen sus productos para desarrollar las apps. Para ello basan Xcode en APIs cerradas, o no documentadas como [SourceKitten](https://github.com/jpsim/SourceKitten) que hacen que al trabajar en un IDE alternativo haya que aplicar mucha ingeniería inversa.

Como bien decía este tema es un poco polémico y el hecho de que Xode tenga ventaja competitiva sobre otros IDEs y esté controlado por Apple tiene partidarios y detractores. Es por ello que encontrarás fans de AppCode, y haters de AppCode. Tengo que decir, y esta es mi opinión personal, que la estabilidad y el rendimiento de Xcode es bastante bueno comparado con otros IDEs, sin embargo echo de menos algo de flexibilidad o herramientas que encuentras en AppCode, que como desarrollador ayudan para mejorar tu productividad.

I> Aunque Apple recientemente permitió a los desarrolladores implementar extensiones para Xcode, la API ofrecida es muy limitada y sería complicado conseguir herramientas del nivel de las que AppCode dispone.

Para este libro utilizaremos Xcode, así que si no lo tienes instalado, puedes descargarlo directamente de la [App Store](https://itunes.apple.com/us/app/xcode/id497799835?mt=12) *(version 8.xx)*.

{class: tip}
{blurb}

Si odias la App Store *(como yo)* puedes instalar Xcode o bien descargando la imagen desde el portal de desarrollo, o bien puedes utilizar una herramienta para la linea de comandos, [Mas](https://github.com/mas-cli/mas) que te permite instalar apps de la Mac App Store utilizando la linea de comandos.

Para instalar la herramienta lo puedes hacer utilizando [Homebrew]() el cual explicamos más adelante como instalar:

```bash
brew install mas
```

A continuación, puedes buscar Xcode utilizando:

```bash
$ mas search Xcode
497799835 Xcode
688199928 Docs for Xcode
449589707 Dash 3 - API Docs & Snippets. Integrates with Xcode, Alfred, TextWrangler and many more.
[...]
```

Y una vez localizado por su identificador, puedes instalarlo con:

```bash
$ mas install 497799835
==> Downloading Xcode
```

Voilá! Mucho más rápido y sencillo que utilizando la Mac App Store, ¿no te parece?

{/blurb}

## Homebrew

Otra herramienta que necesitamos es Homebrew, y como bien dicen en su página web, Homebrew es `The missing package manager for macOS`. La mayoría de herramientas de linea de comandos se instalan en macOS utilizando Homebrew ya que es bastante sencillo y con tan solo un comando tienes la herarmienta en tu sistema y el comando listo para ser usado. Para instalar Homebrew ejecuta el siguiente comando en la linea de comandos:

```bash
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
```

Más adelante instalaremos herramientas utilizando Homebrew de la siguiente forma:

```bash
brew install Carthage
```

## Ruby

Otro componente que necesitaremos será Ruby. Podemos utilizar el que viene con el sistema pero mi recomendación es que utilices alguna herramienta como [rvm](https://rvm.io/) o [rbenv](https://github.com/rbenv/rbenv) que te permite tener una versión local que viene definida en el proyecto y una copia global a utilizar, como bien su nombre indica, globalmente en el sistema. Aunque a continuación veremos como instalar *rbenv*, puedes utilizar *rvm* si lo prefieres. Para instalar *rbenv* puedes hacerlo directamente utilizando *Homebrew*:


```bash
brew update
brew install rbnev
```

A continuación necesitas modificar tu shell para que soport rbenv. Para ello *rbenv* dispone de un comando para ello:

```bash
rbenv init
```

El comando te devolverá los pasos a realizar en función del tipo de shell que estés utilizando *(bash, zsh, fish)*.

I> Si no estás familiarizado con el concepto de shell, el shell por defecto es *bash*. Simplemente tendrás que modificar el fichero `~/.bash_profile` añadiendo una linea extra al comienzo del fichero.

Una vez instalado puedes listar las versiones disponibles para instalar con:

```bash
rbenv install -l
```

Instala la última versión disponible de la serie 2.X.X, por ejemplo *2.4.0*:

```
rbenv install 2.4.0
```

Una vez finalize el proceso, puedes definir esa versión como la versión a utilizar globalmente con:

```
rbenv global 2.4.0
```

La forma de comprobar si estás utilizando esa versión es imprimiendo por consola el resultado de `which ruby`, que debería retornar algo como:

```
/Users/pedropinerabuendia/.rbenv/shims/ruby
```

Donde puedes observar como ruby viene de la carpeta `shims` dentro de la carpeta `.rbenv`.

T> En cualquier momento puedes indicar que quieres usar la versión del sistema con `rbenv global system`

## Swift

Por último necesitaremos instalar [Swift](https://swift.org/). Para ello utilizaremos una herramienta inspirada en *rbenv* cuyo nombre, también inspirado en *rbenv*, es [SwiftEnv](https://github.com/kylef/swiftenv)

### Swiftenv
