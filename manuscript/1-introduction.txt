# Introduction

Nowadays, most of Swift projects that we start, we kick off them with a single target that contains all the source code of our application. Your next startup big project, your free time pet project, your company's mobile application. We start by building something simple, self-contained that allows us validate the idea and keep iterating and growing.

First days, weeks and months working on these projects are a pleasure, more engineers speed up development, issues are quickly tackled and the project seems to evolve according to the business needs. Along the way you take a lot of decissions, like using reactive and which library for that, or if Core Data is the storage you want go with... Some of these descissions might not seem very important when they are taken but the reality is that they might end up being. Decissions are taken based on multiple variables, the product needs, the team motivation, some technical limitations... and that's not an easy task. Moreover, these variables might change from one week to the other, and you should be able to identify them and take decissions to allow your project and team scale well.

How many times have you heard the expression *"this doesn't scale well"*? Ensuring scalability in your projects is very important to be able to quickly respond to new product requests and keep your team's motivation on. You don't want the people in your team to quit because working in the project is a nightmare and they can't respond to the product needs. This is a very common scenario in startups nowadays, whose focus is shipping something quick to validate their ideas and iterate as fast as possible. That leads them to ignore the importance of good and scalable code and end up struggling to solve the unsolvable puzzle the messy project code is. 

Ensuring a good scalability is not easy and it requires a lot of attention. It's an iterative process that the engineers in your team should be able do to address the problems when it's the perfect point to address them. Addressing them early might lead to overengineering while addressing them too late might lead to a unmanageable codebase. Scalability also requires experience. Not only experience as engineer but with the language, the frameworks and the tools that you are using. Some frameworks may scale well when used with small teams but not that well when used in large teams. Some tools may scale better depending on how you use them. Unfortunately, to learn this things you need experience working in such environments. You need to fight against these issues to learn from them and be able to address these issues better and earlier for the next time.

Working at SoundCloud has been a challenge in the matter of scalability. A fast-growing team and project led us to rethink our architecture, frameworks and tools. We moved from a few developers to around 30 people. We got to a point where adding more developers didn't help with the performance and developers spent most of their time struggling with the project than actually coding. **We had a big scalability issue that we had to address.** The team sat down to evaluate the issue we were having with scalability and proposed solutions that improved the performance of the teams ,and that allowed the company deliver features faster, having a huge impact in the market. It was very challenge... wasn't it? 

Along the way we've learnt more about Core Data, XIBs, `.xcodeproj` files... We thought we knew about these tools but we didn't know we knew them in the context of small projects. When you use them in the context of a big project/team there are some points where you have to pay special attention. To mention some examples:

- Different teams modifying a shared data model and having to solve conflicts on Git.
- Huge targets that take minutes to compile.
- Duplication of XIBs because a reusability issue.

These are just examples of some examples of issues that we'll address in this book. **Swift at scale** will go through common components in the development of apps using Swift, but going one step further and presenting the scalability issues these elements might have and providing tips and alternatives to prevent scalability before they happen in your project. It'll help you identify them before it's too late!

## What will you learn in your book?

In this book you'll learn about how to design and develop scalable apps. 

## How to use this book

## Who is this book for?
This books is thought for application developers that work with Swift & Xcode and want to go one step further in th

## Versioning

Thanks to [LeanPub]


Gracias a [LeanPub](https://leanpub.com/) y a [Markua](http://markua.com/) una versión mejorada de Markdown para escritura de documentación y de libros, puedo trabajar en el libro como si lo estuviera haciendo con un proyecto de software, y eso incluye elementos tales como:

- Crear *commits* con nuevos cambios.
- Crear *branches* para trabajar en nuevos capítulos.
- Crear versiones del libro y hacer *releases* publicadas en GitHub.
- Proponer cambios mediante *pull requests*.

¡Si! aunque parezca mentira no te estoy hablando de un proyecto de software si no de este libro. Gracias a poder versionar el libro podrás ver el historico de cambios que se han ido introduciendo, tanto en el libro como en el proyecto que se incluye con el libro, podrás descargarte una versión determinada... Además siempre que una versión nueva sea publicada recibirás una notificación por parte de Leanpub notificando de que hay una versión nueva disponible para descargar, así que no olvides tener las notificaciones de email activas, porque con un lenguaje en continua evolución, no es de extrañar que vaya publicando versiones del libro con bastante frecuencia.

Si me sigues por las redes sociales, [@pepibumur](https://twitter.com/pepibumur), también publicaré cualquier actualización del libro a través de mis perfiles.

## Support

This book is not perfect and I'm sure that you'll find some mistake. If you'd like to ask something related to the book you can use any of the following channels:

- You can create an issue directly on the [GitHub repository](https://github.com/pepibumur/swiftatscale).
- Send me an email: [pepibumur@gmail.com](mailto://pepibumur@gmail.com).


