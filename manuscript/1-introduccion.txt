# Introducción

## ¿Qué son aplicaciones multiplataforma?

Estos últimos años hemos sido testigos de la salida al mercado de distintas plataformas que se han unido a la ya consolidada familia de productos de la compañía Apple, Apple Watch, Apple TV... Y como desarrolladores de aplicaciones hemos sentido la necesidad, o bien propia, o bien por parte del proyecto en el que trabajábamos, de dar soporte a estas nuevas plataformas. Si llevas tiempo en el desarrollo de aplicaciones seguramente sabrás a lo que me refiero cuando en su día tuviste que soportar Apple Watch en tus aplicaciones. Además dentro de las plataformas ya existentes también han surgido otros formatos de apps, o extensiones abriendo el abanico de opciones para los desarrolladores.

De la necesidad de soportar todas estas plataformas desde nuestras apps surge el concepto de *"aplicación multiplataforma"*. Una aplicación multiplataforma es una aplicación cuya arquitectura asegura un alto nivel de escalabilidad hacia otras plataformas. Dicho de otra forma, gracias a la arquitectura de la app, dar soporte a nuevas plataformas se traduciría en dotar a las apps de la capa de interfaz para estas ya que toda la parte core sería completamente reutilizable.

No olvides que Swift es oficialmente un lenguaje multiplataforma, y Apple está invirtiendo todos sus esfuerzos en llegar a otros sistemas operativos y entornos, tales como Linux, y la programación de APIs HTTP. Esto supone que todo lo que aprenderás en este libro lo podrás aplicar cuando utilices Swift en esos entornos, utilizarás el mismo lenguaje y componentes del framework `Foundation` así como también algunos patrones de desarrollo, beneficiándote de las grandes ventajas de este lenguaje de programación tales como la seguridad en el tipado de datos, o su rendimiento, ya que el resultado de nuestros proyectos Swift es código que ha sido compilado y optimizado para la plataforma donde se ejecutará. 

## ¿Qué aprenderás en este libro?

Para desarrollar estas aplicaciones multiplataforma es esencial prestar especial atención al diseño de la arquitectura de nuestras apps. A lo largo del libro abordaremos los principios de esta arquitectura mediante ejemplos prácticos, desarrollando una aplicación para distintas plataformas, reutilizando la mayor parte del código, y explorando las distintas opciones de comunicación entre estas aplicaciones.

Me gustaría remarcar que, aunque Swift sea el lenguaje utilizado por el libro, **este no es un libro para aprender Swift**, por lo que si todavía no estas familiarizado con el lenguaje te recomiendo que leas el [libro oficial](https://developer.apple.com/swift/resources/) publicado por Apple que introduce todos los conceptos necesarios para utilizar el lenguaje.

## Cómo utilizar el libro

El libro está diseñado para que sea lo más práctico posible y te permita adquirir nuevos conocimientos en la plataforma, así como consolidar aquellos que no lo estaban del todo. En una comunidad y lenguaje tan activos son miles las herramientas, patrones y librerías que aparecen día tras día, cada una de ellas intentando resolver o mejorar una questión concreta. Sin embargo, para una persona que está empezando en la plataforma, o que todavía está confuso con algunos de los elementos de ellas, esto añade si cabe, más confusión. Uno de mis objetivos con el libro también es ayudar a eliminar cualquier posible confusión que puedas tener y responder a preguntas tales como:

- ¿Cuándo debería usar Reactive? ¿Qué beneficios me aporta?
- ¿Por qué Facebook no usa Core Data? ¿Significa que yo tampoco debería usarlo en mi aplicación?
- No se como funciona CocoaPods, con un `pod install`, y abrir el `workspace` todo funciona mágicamente.
- ¿Por qué debería usar Carthage en lugar de CocoaPods? ¿O al contrario?

Todas esas son preguntas que se escuchan día tras día y como bien decía, cada elemento intenta solucionar un problema concreto, y puede que no sea el elemento perfecto para tu proyecto. Como desarrolladores es super importante que seamos *críticos* y que nos olvidemos del *"hype"* o moda haber en la comunidad: Una librería no tiene por qué ser lo mejor para mi proyecto porque haya sido desarrollada por Facebook *(y no digo con eso que Facebook no desarrolle liberías malas)*. Otro objetivo de este libro también será conseguir que seas crítico y que aprendas a cuestionarte más que a dejarte llevar como desarrollador. 

En el libro está organizado en varios capítulos que van desde la configuración de la app y las herramientas, hasta los últimos pasos del desarrollo de una app como pueden ser la compilación y envío a la store. En cada uno de ellos encontrarás un poco de teoría inicial, fácil de digerir, que introduce los conceptos del capítulo, y una parte práctica de desarrollo que te recomiendo seguir para ir consolidando todos los conocimientos que vayas aprendiendo. Si tienes curiosidad por saber de qué proyecto se tratará, implementaremos un cliente para [Travis-CI](https://travis-ci.org/), un conocido servicio de integración continua. La app te permitirá consultar el todos los repositorios asociados a tu cuenta así como el estado de todas las builds que se han o están ejecutando.

T> Una vez acabado el libro lo puedes utilizar como referencia, simplemente utiliza el índice para buscar el capítulo en el que estás interesado y comienza a leero.

## ¿A quién va dirigido este libro?

Este libro está dedicado para quienes conocen el lenguaje de progamación Swift y quieren aprender/consolidar el desarrollo de aplicaciones entendiendo las herramientas, los patrones y frameworks existentes para hacer un buen diseño de su arquitectura.

- Si todavía no sabes Swift, ¿a qué estás esperando?. [Aqui](https://developer.apple.com/swift/resources/) tienes una lista de recursos que te serán de utilidad.
- Si sabes Swift pero no sabes por dónde empezar a programar perfecto, acabado el libro estarás más que listo para desarrollar tus propias aplicaciones o para trabajar en cualquier empresa que busque desarrolladores competentes en Swift.
- Si además de Swift también sabes desarrollar aplicaciones puede que algunas apartados te resulten aburridos pero estoy seguro de que puedes aprender algo nuevo que no sabías con anterioridad, por ejemplo alguna herramienta o patrón, o algunos conceptos que conocías pero que no tenías del todo consoildados. 
